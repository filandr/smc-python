Creating the session
--------------------

In order to interact with the SMC ReST API, you must first obtain a valid login session. 
The session is generated by authenticating an API Client and the associated authentication key.

Once the login session has been retrieved successfully, all commands or controls will reuse 
the same session. 

When exiting, call `smc.api.web.logout()` to remove the active session from the SMC.

.. note:: Idle API sessions will still time out after a default timeout on the SMC server.

Steps to enable API Communication on the Stonesoft Management Center:

#. Enable SMC API service on the properties of the Management Server
#. Create an API Client and obtain the 'authentication key'

Once you have enabled this and have access to the authentication key (keep this safe), 
you can establish a session to the SMC using the following methods (in order):

* Provide credentials in session.login() constructor

* Populate $HOME/.smcrc with configuration settings

* Set environment variables


Example of providing the connect information through the constructor:

.. code-block:: python

   from smc import session

   session.login(url='http://1.1.1.1:8082', api_key='xxxxxxxxxxxxxxxxx')
   ....do stuff....
   session.logout()

If a specific API version is requested, you can add the following argument to the login
constructor. Otherwise the latest API version available will be used.

To find supported versions using unauthenticated call to SMC:
::

	>>> from smc.api.session import available_api_versions
	>>> available_api_versions('http://1.1.1.1:8082')
	[5.1, 6.1, 6.2]

Set up connection to specific version:

.. code-block:: python

   from smc import session
   session.login(url='http://1.1.1.1:8082', api_key='xxxxxxxxxxxxxxxxx', 
                 api_version='6.1')

Logging in to a specific Admin Domain:

.. code-block:: python

   session.login(url='http://1.1.1.1:8082', api_key='xxxxxxxxxxxxxxxxx', 
                 domain='mydomain')

.. note:: If an admin domain is specified but the SMC does not have domains configured, 
		  you will be placed in the 'Shared Domain'.
	
In order to use SSL connections, you must first associate a private key and certificate
with the SMC API server. This is done under the Management Server properties and SMC API.
Obtain the certificate for use by the client.
It is recommended to ensure your certificate has the subjectAltName field set per
RFC 2818.

Using SSL and specify certificate for verifying:

.. code-block:: python

   from smc import session
   session.login(url='https://1.1.1.1:8082', api_key='xxxxxxxxxxxxxxxx', 
                 verify='/Users/davidlepage/home/mycacert.pem')
   
Using SSL to the SMC without SSL validation (NOT recommended)

.. code-block:: python

   from smc import session
   session.login(url='https://1.1.1.1:8082', api_key='xxxxxxxxxxxxxxxxxx',
                 verify=False)

.. seealso:: :meth:`smc.api.session.Session.login`

It is possible to store the SMC connection information in ~/.smcrc in order to simplify
the login and eliminate the need to populate scripts with api key information. 
Syntax for ~/.smcrc:

.. code-block:: python

   [smc]
   smc_address=1.1.1.1
   smc_apikey=xxxxxxxxxxxxxxxxxxx
   api_version=6.1
   smc_port=8082
   smc_ssl=True
   verify_ssl=True
   ssl_cert_file='/Users/davidlepage/home/mycacert.pem'
   domain=mydomain
   
Then from launching scripts, you can do:

.. code-block:: python
	
	session.login()
	session.logout()

.. note:: It is possible to override the location of .smcrc by using the 'altpath' argument in
          the login constructor.

.. code-block:: python

   session.login(altpath='/home/somedir/test')

If setting environment variables, the following are supported::

	SMC_ADDRESS=http://1.1.1.1:8082
	SMC_API_KEY=123abc
	SMC_CLIENT_CERT=path/to/cert
	SMC_TIMEOUT = 30 (seconds)
	SMC_API_VERSION = 6.1 (optional - uses latest by default)
	SMC_DOMAIN = name of domain, Shared is default 

The minimum variables that need to be present are ``SMC_ADDRESS`` and ``SMC_API_KEY``::

	export SMC_ADDRESS = http://1.1.1.1:8082
	export SMC_API_KEY = foobarkey


Once the session has been successfully obtained, there is no reason to re-authenticate a new session
unless `logout` has been called.

.. note:: The SMC will automatically purge idle sessions after a configurable amount of time.
		  
To enable logging from smc-python, a convenience method is provided to show stream logging:

.. code-block:: python

   from smc import set_stream_logger
   set_stream_logger(level=logging.DEBUG, format_string=None)
   
Another option is to add the following lines to your script:

.. code-block:: python

   import logging
   logging.getLogger()
   logging.basicConfig(
       level=logging.DEBUG, format='%(asctime)s %(levelname)s %(name)s.%(funcName)s: %(message)s')

The ``format`` parameter follows the standard python logging module syntax.